desc: MIDI Arpagnan
author: jahudka (modified by samlletas)
version: 1.0
changelog: Added more patterns and velocity modulation, removed backtrack sliders
about: Modified version of dArpagnan Arpeggiator (https://github.com/jahudka/reaper-consolefx)

slider1:0<0,4,1{Linear,ZigZag,SwayLow,SwayHigh,Spiral}>Algorithm
slider2:0<0,5,1{Up,Down,Up-Down,Down-Up,Up-Down (Repeat),Down-Up (Repeat)}>Direction
slider3:1<1,4,1>Octaves
slider4:resolution=7<0,23,1{1/64 Triplet,1/64,1/64 Dotted,1/32 Triplet,1/32,1/32 Dotted,1/16 Triplet,1/16,1/16 Dotted,1/8 Triplet,1/8,1/8 Dotted,1/4 Triplet,1/4,1/4 Dotted,1/2 Triplet,1/2,1/2 Dotted,1/1 Triplet,1/1,1/1 Dotted,2/1 Triplet,2/1,2/1 Dotted}>Resolution
slider5:gate=1<0.1,1,0.1>Gate
slider6:velocity=0<0,127,1>Velocity (0=use played velocity)
slider7:lfo_depth=0<-127,127,1>Velocity LFO Depth
slider8:lfo_wave=0<0,2,1{Sawtooth,Triangle,Square}>Velocity LFO Wave
slider9:lfo_steps=16<2,16,1>Velocity LFO Steps
slider10:lfo_phase=0<0,16,1>Velocity LFO Phase
slider11:retrigger=0<0,1,1{Rest,Any Note Change}>Retrigger On
slider12:single_note=0<0,1,1{No,Yes}>Single-Note Playthrough

in_pin:none
out_pin:none

@init
notes = 0000; num_notes = 0; num_notes_prev = 0;
pool  = 1000; pool_size = 0;
steps = 2000; num_steps = 0;
nvmap = 3000;
pvmap = 4000;
svmap = 5000;
note = -1;
step = -1;
step_count = 0;
step_length = 0;
time = 0;
algo = 0;
direction = 0;
octaves = 0;

// algorithm constants
LINEAR = 0;
ZIGZAG = 1;
SWAYLOW = 2;
SWAYHIGH = 3;
SPIRAL = 4;

// direction constants
UP = 0;
DOWN = 1;
UP_DOWN = 2;
DOWN_UP = 3;
UP_DOWN_REPEAT = 4;
DOWN_UP_REPEAT = 5;

// lfo wave constants
SAWTOOTH = 0;
TRIANGLE = 1;
SQUARE = 2;

// inserts note into the sorted list of playing notes
function add_note(n, v) local(i, x, tmp) (
  x = -1;
  i = 0; while (i > -1 && i <= num_notes) (
    x < 0 ? (
      notes[i] == n ? (
        i = -1; // duplicate, don't add
      ) : (i < 1 || notes[i - 1] < n) && (i === num_notes || notes[i] > n) ? (
        x = i;
        nvmap[n] = v;
      );
    );

    x > -1 && i >= x ? (
      tmp = notes[i];
      notes[i] = n;
      n = tmp;
    );

    i += 1;
  );

  x > -1 ? num_notes += 1;
  /* return */ i;
);

// removes note from list of playing notes
function rem_note(n) local(i, x) (
  x = -1;
  i = 0; while (i < num_notes) (
    x < 0 && notes[i] == n ? x = i;
    x > -1 && i >= x ? (
      notes[i] = notes[i+1];
      notes[i + 1] = 0;
    );
    i += 1;
  );

  x > -1 ? num_notes -= 1;
  /* return */ x;
);

// maps note and velocity to the specified step
function map_step(s, n) (
  steps[s] = pool[n % pool_size];
  svmap[s] = pvmap[n % pool_size];
);

function generate_notes_pool() local(n) (
  pool_size = num_notes * octaves;

  n = 0; while (n < pool_size) (
    pool[n] = notes[n % num_notes] + (12 * floor(n / num_notes));
    pvmap[n] = nvmap[notes[n % num_notes]];
    n += 1;
  );

  /* return */ pool_size;
);

function generate_steps_linear(d, o) local(n, s) (
  num_steps = pool_size;

  s = 0; n = d < 0 ? pool_size - 1 : 0; while (s < num_steps) (
    map_step(s + o, n);
    s += 1;
    n += d;
  );

  /* return */ num_steps;
);

function generate_steps_linear_cyclic(d, trim) local(ns1, ns2) (
  ns1 = generate_steps_linear(d, 0) - trim;
  ns2 = generate_steps_linear(-d, ns1) - trim;
  /* return */ num_steps = ns1 + ns2;
);

function generate_steps_zigzag(d, o) local(n, s) (
  num_steps = pool_size + abs(pool_size - 4);

  s = 0; n = d < 0 ? pool_size - 1 : 0; while (s < num_steps) (
    map_step(s + o, n);
    s += 1;
    n += (s % 2 == 0) ? -d : 2 * d;
    n = min(max(n, 0), pool_size - 1);
  );

  /* return */ num_steps;
);

function generate_steps_zigzag_cyclic(d, trim) local(ns1, ns2) (
  ns1 = generate_steps_zigzag(d, 0) - trim;
  ns2 = generate_steps_zigzag(-d, ns1) - trim;
  /* return */ num_steps = ns1 + ns2;
);

function generate_steps_swaylow(d, o) local(n, s) (
  num_steps = (pool_size - 1) * 2;

  s = 0; n = d < 0 ? pool_size - 1 : 1; while (s < num_steps) (
    s % 2 == 0 ? (
      map_step(s + o, 0);
    ) : (
      map_step(s + o, n);
      n += d;
    );
    s += 1;
  );

  /* return */ num_steps;
);

function generate_steps_swaylow_cyclic(d, trim) local(ns1, ns2) (
  ns1 = generate_steps_swaylow(d, 0) - trim;
  ns2 = generate_steps_swaylow(-d, ns1) - trim;
  /* return */ num_steps = ns1 + ns2;
);

function generate_steps_swayhigh(d, o) local(n, s) (
  num_steps = (pool_size - 1) * 2;

  s = 0; n = d < 0 ? pool_size - 2 : 0; while (s < num_steps) (
    s % 2 == 0 ? (
      map_step(s + o, pool_size - 1);
    ) : (
      map_step(s + o, n);
      n += d;
    );
    s += 1;
  );

  /* return */ num_steps;
);

function generate_steps_swayhigh_cyclic(d, trim) local(ns1, ns2) (
  ns1 = generate_steps_swayhigh(d, 0) - trim;
  ns2 = generate_steps_swayhigh(-d, ns1) - trim;
  /* return */ num_steps = ns1 + ns2;
);

function generate_steps_spiral(d, o) local(n, s) (
  num_steps = pool_size;

  s = 0; n = d > 0 ? floor(pool_size / 2) : 0; while (s < num_steps) (
    map_step(s + o, n);
    s += 1;
    d > 0 ? (
      n += ((num_steps - s) % 2 == 0) ? s : -s;
    ) : (
      n += (s % 2 == 0) ? s - num_steps : num_steps - s;
    );
  );

  /* return */ num_steps;
);

function generate_steps_spiral_cyclic(d, trim) local(ns1, ns2) (
  ns1 = generate_steps_spiral(d, 0) - trim;
  ns2 = generate_steps_spiral(-d, ns1) - trim;
  /* return */ num_steps = ns1 + ns2;
);

function generate_steps() (
  num_notes <= 0 ? (
    num_steps = 0;
    pool_size = 0;
  ) : (
    generate_notes_pool();
    num_notes <= single_note || pool_size == 1 ? (
      generate_steps_linear(1, 0);
    ) : algo == LINEAR || pool_size == 2 ? (
      direction == UP ? generate_steps_linear(1, 0) :
      direction == DOWN ? generate_steps_linear(-1, 0) :
      direction == UP_DOWN ? generate_steps_linear_cyclic(1, 1) :
      direction == DOWN_UP ? generate_steps_linear_cyclic(-1, 1) :
      direction == UP_DOWN_REPEAT ? generate_steps_linear_cyclic(1, 0) :
      direction == DOWN_UP_REPEAT ? generate_steps_linear_cyclic(-1, 0);
    ) : algo == ZIGZAG ? (
      direction == UP ? generate_steps_zigzag(1, 0) :
      direction == DOWN ? generate_steps_zigzag(-1, 0) :
      direction == UP_DOWN ? generate_steps_zigzag_cyclic(1, 1) :
      direction == DOWN_UP ? generate_steps_zigzag_cyclic(-1, 1) :
      direction == UP_DOWN_REPEAT ? generate_steps_zigzag_cyclic(1, 0) :
      direction == DOWN_UP_REPEAT ? generate_steps_zigzag_cyclic(-1, 0);
    ) : algo == SWAYLOW ? (
      direction == UP ? generate_steps_swaylow(1, 0) :
      direction == DOWN ? generate_steps_swaylow(-1, 0) :
      direction == UP_DOWN ? generate_steps_swaylow_cyclic(1, 2) :
      direction == DOWN_UP ? generate_steps_swaylow_cyclic(-1, 2) :
      direction == UP_DOWN_REPEAT ? generate_steps_swaylow_cyclic(1, 0) :
      direction == DOWN_UP_REPEAT ? generate_steps_swaylow_cyclic(-1, 0);
    ) : algo == SWAYHIGH ? (
      direction == UP ? generate_steps_swayhigh(1, 0) :
      direction == DOWN ? generate_steps_swayhigh(-1, 0) :
      direction == UP_DOWN ? generate_steps_swayhigh_cyclic(1, 2) :
      direction == DOWN_UP ? generate_steps_swayhigh_cyclic(-1, 2) :
      direction == UP_DOWN_REPEAT ? generate_steps_swayhigh_cyclic(1, 0) :
      direction == DOWN_UP_REPEAT ? generate_steps_swayhigh_cyclic(-1, 0);
    ) : algo == SPIRAL ? (
      direction == UP ? generate_steps_spiral(1, 0) :
      direction == DOWN ? generate_steps_spiral(-1, 0) :
      direction == UP_DOWN ? generate_steps_spiral_cyclic(1, 1) :
      direction == DOWN_UP ? generate_steps_spiral_cyclic(-1, 1) :
      direction == UP_DOWN_REPEAT ? generate_steps_spiral_cyclic(1, 0) :
      direction == DOWN_UP_REPEAT ? generate_steps_spiral_cyclic(-1, 0);
    );
  );
);

function compute_step_length() local(t, n, f) (
  t = 60 / tempo;
  n = 2 ^ (floor(resolution / 3) - 4);
  f = resolution % 3;
  f == 0 ? f = 2/3 : f == 2 ? f = 3/2;
  step_length = t * n * f;
);

function process_midi() local(tr, offset, msg1, msg2, msg3) (
  tr = 0;

  while (midirecv(offset, msg1, msg2, msg3)) (
    // normalize note on / velocity 0 to note off
    msg1 == $x90 && msg3 == 0 ? (
      msg1 = $x80;
    );

    msg1 == $x90 ? (
      add_note(msg2, msg3) > -1 ? tr = 1;
    ) : msg1 == $x80 ? (
      rem_note(msg2) > -1 ? tr = 1;
    ) : (
      // passthru
      midisend(offset, msg1, msg2, msg3);
    );
  );

  /* return */ tr;
);

// From https://rosettacode.org/wiki/Map_range
function map_range(s, a1, a2, b1, b2) (
  /* return */ b1 + (s - a1) * (b2 - b1) / (a2 - a1);
);

function get_velocity(s) local(v, target, v1, v2, step_pos) (
  v = (velocity > 0 && num_notes > single_note) ? velocity : svmap[s];

  lfo_depth != 0 && num_notes > single_note ? (
    target = min(max(v + lfo_depth, 0), 127);
    step_pos = step_count + lfo_phase;

    lfo_wave == SAWTOOTH ? (
      v = map_range(step_pos % lfo_steps, 0, lfo_steps - 1, v, target);
    ) : lfo_wave == TRIANGLE ? (
      floor(step_pos / (lfo_steps - 1)) % 2 == 0 ? (v1 = v; v2 = target) : (v1 = target; v2 = v);
      v = map_range(step_pos % (lfo_steps - 1), 0, lfo_steps - 1, v1, v2);
    ) : lfo_wave == SQUARE ? (
      v = floor(step_pos / lfo_steps) % 2 == 0 ? v : target;
    );
  );

  /* return */ v;
);

function restart_seq() (
  // stop current note, if any
  note > -1 ? (
    midisend(0, $x80, note, 0);
    note = -1;
  );

  // restart
  time = 0;
  step = -1;
  step_count = 0;

  // if there is at least one note in the array, start playing it
  num_steps > 0 ? (
    step = 0;
    note = steps[step];
    midisend(0, $x90, note, get_velocity(step));
  );
);

function advance_seq() local(timestep) (
  time += 1;
  timestep = srate * step_length;

  // if we're supposed to play the next note now let's do so
  time >= timestep ? (
    time -= timestep;
    note > -1 ? midisend(0, $x80, note, 0);
    step = (step + 1) % num_steps;
    step_count += 1;
    note = steps[step];
    midisend(0, $x90, note, get_velocity(step));
  ) : note > -1 && (time / timestep) >= gate ? (
    midisend(0, $x80, note, 0);
    note = -1;
  );
);

@slider
algo != slider1 || direction != slider2 || octaves != slider3 ? (
  algo = slider1;
  direction = slider2;
  octaves = slider3;
  step = -1;
  step_count = 0;
  generate_steps();
);

@block
compute_step_length();

@sample
process_midi() > 0 ? (
  // if something changed, regenerate steps
  generate_steps();

  // (re)start sequence if needed
  step < 0 || num_notes <= single_note || num_notes_prev <= single_note || retrigger > 0 ? restart_seq();
) : num_notes > single_note ? (
  // if nothing changed & we're playing, check if we should
  // advance to the next note
  advance_seq();
);

num_notes_prev = num_notes;
